[versions]
byteBuddy = "1.14.18"
caffeine = "3.1.8"
graphqlJava = "21.5"
graphqlJavaExtendedScalars = "22.0"
graphqlKotlin = "7.1.1"
groovy = "4.0.21"
jackson = "2.17.2"
janino = "3.1.12"
jodaTime = "2.12.7"
junitJupiter = "5.10.3"
kotest = "5.9.1"
kotestSpring = "1.3.0"
kotlin = "2.0.10"
kotlinx = "1.8.1"
ktor = "2.3.10"
logbackCore = "1.5.6"
mockk = "1.13.12"
pact = "4.6.13"
reflections = "0.10.2"
slf4j = "2.0.15"
spring = "6.1.11"
springBoot = "3.3.2"
springSecurity = "6.3.1"

[libraries]
byteBuddy = { module = "net.bytebuddy:byte-buddy", version.ref = "byteBuddy" }
caffeine = { module = "com.github.ben-manes.caffeine:caffeine", version.ref = "caffeine" }
jackson = { module = "com.fasterxml.jackson.datatype:jackson-datatype-joda", version.ref = "jackson" }
jacksonKotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jsonpath = { module = "com.jayway.jsonpath:json-path", version = "2.9.0" }
junitJupiterApi = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junitJupiter" }
junitJupiterEngine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junitJupiter" }
junitJupiterParams = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junitJupiter" }
junitVintageEngine = { module = "org.junit.vintage:junit-vintage-engine", version = "[5.3.1,6)" }
kotestAssertions = { module = "io.kotest:kotest-assertions-core-jvm", version.ref = "kotest" }
kotestCore = { module = "io.kotest:kotest-assertions-core-jvm", version.ref = "kotest" }
kotestEngine = { module = "io.kotest:kotest-framework-engine-jvm", version.ref = "kotest" }
kotestProperty = { module = "io.kotest:kotest-property-jvm", version.ref = "kotest" }
kotestRunner = { module = "io.kotest:kotest-runner-junit5-jvm", version.ref = "kotest" }
kotestSpring = { module = "io.kotest.extensions:kotest-extensions-spring", version.ref = "kotestSpring" }
kotlin = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
log4jOverSlf4j = { module = "org.slf4j:log4j-over-slf4j", version.ref = "slf4j" }
logbackClassic = { module = "ch.qos.logback:logback-classic", version.ref = "logbackCore" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
mockkSpring = { module = "com.ninja-squad:springmockk", version = "4.0.2" }
pactJunit5Consumer = { module = "au.com.dius.pact.consumer:junit5", version.ref = "pact" }
pactJunit5Provider = { module = "au.com.dius.pact.provider:junit5spring", version.ref = "pact" }
slf4jApi = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
springBeans = { module = "org.springframework:spring-beans", version.ref = "spring" }
springBootActuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "springBoot" }
springBootAutoconfigure = { module = "org.springframework.boot:spring-boot-autoconfigure", version.ref = "springBoot" }
springBootMongo = { module = "org.springframework.boot:spring-boot-starter-data-mongodb", version.ref = "springBoot" }
springBootTest = { module = "org.springframework.boot:spring-boot-test", version.ref = "springBoot" }
springBootWeb = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "springBoot" }
springContext = { module = "org.springframework:spring-context", version.ref = "spring" }
springContextSupport = { module = "org.springframework:spring-context-support", version.ref = "spring" }
springDoc = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version = "2.6.0" }
springSecurityConfig = { module = "org.springframework.security:spring-security-config", version.ref = "springSecurity" }
springSecurityCore = { module = "org.springframework.security:spring-security-core", version.ref = "springSecurity" }
springSecurityOAuthClient = { module = "org.springframework.security:spring-security-oauth2-client", version.ref = "springSecurity" }
springSecurityTest = { module = "org.springframework.security:spring-security-test", version.ref = "springSecurity" }
springSecurityWeb = { module = "org.springframework.security:spring-security-web", version.ref = "springSecurity" }
springTest = { module = "org.springframework:spring-test", version.ref = "spring" }
springWeb = { module = "org.springframework:spring-web", version.ref = "spring" }
springWebmvc = { module = "org.springframework:spring-webmvc", version.ref = "spring" }

# for dependency enforcement
annotations = { module = "org.jetbrains:annotations", version = "24.1.0" }
checkerEqual = { module = "org.checkerframework:checker-qual", version = "3.46.0" }
classgraph = { module = "io.github.classgraph:classgraph", version = "4.8.174" }
commonsCodec = { module = "commons-codec:commons-codec", version = "1.17.1" }
commonsIo = { module = "commons-io:commons-io", version = "2.16.1" }
commonsLang = { module = "org.apache.commons:commons-lang3", version = "3.16.0" }
errorProneAnnotations = { module = "com.google.errorprone:error_prone_annotations", version = "2.29.2" }
groovy = { module = "org.apache.groovy:groovy", version = "4.0.22" }
gson = { module = "com.google.code.gson:gson", version = "2.11.0" }
guava = { module = "com.google.guava:guava", version = "33.2.1-jre" }
httpClient5 = { module = "org.apache.httpcomponents.client5:httpclient5", version = "5.3.1" }
httpClientFluent = { module = "org.apache.httpcomponents.client5:httpclient5-fluent", version = "5.3.1" }
httpcore = { module = "org.apache.httpcomponents:httpcore", version = "4.4.16" }
javaDataloader = { module = "com.graphql-java:java-dataloader", version = "3.3.0" }
junitBom = { module = "org.junit:junit-bom", version = "5.10.3" }
junitPlatform = { module = "org.junit.platform:junit-platform-commons", version = "1.10.3" }
kotlinLogging = { module = "io.github.microutils:kotlin-logging", version = "3.0.5" }
kotlinLoggingJvm = { module = "io.github.microutils:kotlin-logging-jvm", version = "3.0.5" }
kotlinLoggingOshai = { module = "io.github.oshai:kotlin-logging-jvm", version = "7.0.0" }
kotlinResult = { module = "com.michael-bull.kotlin-result:kotlin-result", version = "2.0.0" }
kotlinx = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-bom", version.ref = "kotlinx" }
kotlinxCorountineBom = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-bom", version.ref = "kotlinx" }
kotlinxCorountineCore = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx" }
kotlinxCorountineCoreJvm = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm", version.ref = "kotlinx" }
kotlinxCorountineDebug = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-debug", version.ref = "kotlinx" }
kotlinxCorountineJdk8 = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8", version.ref = "kotlinx" }
kotlinxCorountineReactive = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactive", version.ref = "kotlinx" }
kotlinxCorountineSlf4j = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j", version.ref = "kotlinx" }
kotlinxCorountineTest = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "kotlinx" }
kotlinxCorountineTestJvm = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test-jvm", version.ref = "kotlinx" }
kotlinxSerialization = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version = "1.7.1" }
logbackCore = { module = "ch.qos.logback:logback-core", version.ref = "logbackCore" }
micrometer = { module = "io.micrometer:micrometer-core", version = "1.13.2" }
minidev = { module = "net.minidev:json-smart", version = "2.5.1" }
netty = { module = "io.netty:netty-all", version = "4.1.112.Final" }
opentest4j = { module = "org.opentest4j:opentest4j", version = "1.3.0" }
pactDriverCore = { module = "io.pact.plugin.driver:core", version = "0.4.2" }
protobufJava = { module = "com.google.protobuf:protobuf-java", version = "4.27.3" }
tikaCore = { module = "org.apache.tika:tika-core", version = "2.9.2" }
reactivestreams = { module = "org.reactivestreams:reactive-streams", version = "1.0.4" }

[bundles]
junitJupiter = ["junitJupiterApi", "junitJupiterEngine", "junitJupiterParams"]
kotest = ["kotestAssertions", "kotestCore", "kotestEngine", "kotestProperty", "kotestRunner", "kotestSpring"]
logging = ["log4jOverSlf4j", "logbackClassic"]
mockk = ["mockk", "mockkSpring"]
spring = ["springBeans", "springContext", "springContextSupport", "springDoc", "springWeb", "springWebmvc"]
springBoot = ["springBootWeb", "springBootActuator"]
springSecurity = ["springSecurityCore", "springSecurityConfig", "springSecurityWeb", "springSecurityOAuthClient"]
springTest = ["springTest", "springBootTest", "springSecurityTest"]


[plugins]
dockerPublish = { id = "de.europace.docker-publish", version = "2.0.12" }
kotlin = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlinAllopen = { id = "org.jetbrains.kotlin.plugin.allopen", version.ref = "kotlin" }
kotlinSpring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
pact = { id = "au.com.dius.pact", version.ref = "pact" }
privatkreditArtifactVersion = { id = "de.europace.gradle.artifact-version", version = "2020-02-03T18-05-59" }
springBoot = { id = "org.springframework.boot", version.ref = "springBoot" }
